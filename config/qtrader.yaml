# QTrader System Configuration
#
# System-level settings for QTrader backtesting engine.
# These are FRAMEWORK settings that control HOW the engine operates.
#
# ⚠️ IMPORTANT: This is NOT for strategy parameters!
# Strategy-specific configuration (symbols, position size, etc.)
# should be in self-contained .py files.
#
# Configuration precedence:
#   1. CLI flags (highest priority)
#   2. Environment variables (${VAR_NAME})
#   3. ./config/qtrader.yaml (project-relative)
#   4. ~/.qtrader/config.yaml (user home)
#   5. Built-in defaults (lowest priority)

# ============================================================
# Output & Results Configuration
# ============================================================
output:
  # Default base directory for backtest results
  # Can be overridden with CLI --out flag
  # SYSTEM SETTING: Controls where framework saves output
  default_results_dir: "output/backtests"

  # Whether to create timestamped subdirectories
  # Format: <strategy_name>_<timestamp>
  use_timestamps: true

  # Timestamp format (Python strftime format)
  timestamp_format: "%Y%m%d_%H%M%S"

  # Files to generate in output directory
  # SYSTEM SETTING: Controls what files framework generates
  generate_files:
    metadata: true # metadata.json - Backtest summary
    trades: true # trades.csv - Trade history
    fills: true # fills.csv - Fill details
    portfolio: true # portfolio.csv - Portfolio state over time
    positions: true # positions.csv - Position history
    equity_curve: true # equity_curve.csv - Daily equity values

  # Whether to create subdirectories for organization
  # If true: results_dir/YYYY-MM-DD/strategy_name_timestamp/
  # If false: results_dir/strategy_name_timestamp/
  organize_by_date: true

# ============================================================
# Logging Configuration
# ============================================================
logging:
  # Default log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
  # SYSTEM SETTING: Framework logging verbosity
  level: "INFO"

  # Whether to log to file in addition to console
  log_to_file: false

  # Log file location (relative to project root or absolute)
  log_dir: "logs"

  # Log file naming pattern
  log_file_pattern: "qtrader_{timestamp}.log"

  # Structlog configuration
  structlog:
    # Format: console, json, logfmt
    format: "console"

    # Whether to include timestamps
    include_timestamps: true

    # Whether to colorize console output
    colorize: true

# ============================================================
# Execution Engine Configuration
# ============================================================
execution:
  # Commission calculation settings
  # SYSTEM SETTING: HOW commissions are calculated (not the amount per trade)
  commission:
    model: "per_share" # per_share, fixed, percentage, tiered
    per_share: 0.0 # $0.0005 per share (if model=per_share)
    minimum: 0.00 # Minimum commission per trade
    maximum: null # Maximum commission per trade (null = no max)

  # Slippage model settings
  # SYSTEM SETTING: HOW slippage is simulated
  slippage:
    market_order_bps: 0 # Basis points for market orders
    limit_order_bps: 0 # Basis points for limit orders
    stop_order_bps: 0 # Basis points for stop orders
    mode: "conservative" # conservative, aggressive, realistic

  # Fill simulation settings
  # SYSTEM SETTING: HOW orders are filled (simulation rules)
  fill_policy:
    limit_mode: "conservative" # conservative, aggressive, realistic
    stop_mode: "conservative"
    moc_slip_bps: 0 # Market-on-close slippage

  # Order queue management
  # SYSTEM SETTING: HOW long unfilled orders stay in queue
  queue_bars: 3 # Max bars to keep unfilled orders

# ============================================================
# Data Configuration
# ============================================================
data:
  # Path to data sources configuration file
  # This file maps logical data sources (ALGOSEEK, CSV, etc.) to physical adapters
  # Keep separate for security (may contain API keys) and reusability
  # See config/data_sources.yaml or ~/.qtrader/data_sources.yaml
  sources_config: "config/data_sources.yaml"

  # Multi-mode architecture: Different components use different price series
  # Each bar contains all 3 modes, components select optimal mode for their purpose

  # Strategy/Signal generation mode (for indicators and signals)
  # SYSTEM SETTING: Price series for strategy indicator calculations
  # Use "adjusted" for split-consistent technical indicators (SMA, RSI work across splits)
  signal_generation_mode: "adjusted"

  # Execution mode (for order fills and commissions)
  # SYSTEM SETTING: Price series for execution and fill calculations
  # Use "unadjusted" for realistic fills at actual traded prices and accurate commissions
  execution_mode: "unadjusted"

  # Performance mode (for metrics and returns)
  # SYSTEM SETTING: Price series for performance calculations
  # Use "total_return" for accurate returns including dividend reinvestment
  performance_mode: "total_return"

  # Mode descriptions:
  # - unadjusted: Raw prices as traded (for realistic fills, commissions)
  # - adjusted: Split-adjusted only (for consistent indicators across splits)
  # - total_return: Split + dividend adjusted (for accurate performance metrics)

  # Timezone for market data
  # SYSTEM SETTING: Default timezone for timestamp interpretation
  default_timezone: "America/New_York"

  # Price decimal precision
  # SYSTEM SETTING: Decimal places for price calculations
  price_decimals: 6

  # Whether to validate data on load
  # SYSTEM SETTING: Enable/disable data validation checks
  validate_on_load: true

  # Cache configuration (NOT YET IMPLEMENTED)
  cache:
    enabled: false
    cache_dir: ".cache/qtrader"
    max_size_mb: 1000

# ============================================================
# CLI Defaults
# ============================================================
cli:
  # Default verbosity level for CLI
  # SYSTEM SETTING: CLI output verbosity
  verbose: false

  # Whether to show progress bars (NOT YET IMPLEMENTED)
  show_progress: true

  # Whether to display results table after backtest
  show_results: true

  # Auto-open results in browser (NOT YET IMPLEMENTED)
  auto_open_results: false

# ============================================================
# Development & Debug
# ============================================================
development:
  # Enable debug mode features (NOT YET IMPLEMENTED)
  debug_mode: false

  # Profile performance (NOT YET IMPLEMENTED)
  profile: false

  # Validate all dataclass constraints
  # SYSTEM SETTING: Enable strict validation
  strict_validation: true

  # Raise exceptions on warnings (NOT YET IMPLEMENTED)
  warnings_as_errors: false

  # Save intermediate states for debugging (NOT YET IMPLEMENTED)
  save_debug_snapshots: false
  debug_snapshot_interval: 100 # Every N bars

# ============================================================
# Reporting Configuration
# ============================================================
reporting:
  # Metrics to calculate and include in reports (NOT YET IMPLEMENTED)
  metrics:
    - "total_return"
    - "sharpe_ratio"
    - "max_drawdown"
    - "win_rate"
    - "profit_factor"
    - "avg_trade_duration"
    - "calmar_ratio"
    - "sortino_ratio"

  # Report formats to generate
  # SYSTEM SETTING: What file formats to create
  formats:
    json: true # Currently generated
    csv: true # Currently generated
    html: false # Not yet implemented
    pdf: false # Not yet implemented

  # Number of decimal places in reports
  decimal_places: 4

  # Include trade-by-trade details
  include_trade_details: true

# ============================================================
# Integration Settings (NOT YET IMPLEMENTED)
# ============================================================
integration:
  # Webhook notifications (optional)
  webhooks:
    enabled: false
    on_complete_url: null
    on_error_url: null

  # Database logging (optional)
  database:
    enabled: false
    connection_string: "${QTRADER_DB_CONNECTION}"
    log_results: false
    log_trades: false

# ============================================================
# User Preferences
# ============================================================
preferences:
  # Date format for displays
  date_format: "%Y-%m-%d"

  # Currency symbol
  currency_symbol: "$"

  # Number formatting
  thousands_separator: ","
  decimal_separator: "."
