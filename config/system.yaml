# QTrader System Configuration
# ================================================================================
# THE SYSTEM - Consolidated configuration for all services and the engine
#
# This file defines HOW QTrader operates - the trading system infrastructure.
# All backtests will use these settings for fair comparison.
#
# Philosophy: "In real life, the system is one"
# - ONE execution system with ONE commission model
# - ONE data source configuration
# - ONE risk management framework
# - ONE portfolio accounting method
#
# What varies per backtest: dates, universe, capital, strategies (see backtest YAMLs)
# What's fixed (here): commission, slippage, data sources, risk limits
# ================================================================================

# ============================================================
# Data Service Configuration
# ============================================================
data:
  # Data source configuration file (maps logical sources to adapters)
  sources_config: "config/data_sources.yaml"

  # Default adjustment mode for price series
  # Options: unadjusted, adjusted, total_return
  default_mode: "adjusted"

  # Market timezone
  default_timezone: "America/New_York"

  # Price decimal precision
  price_decimals: 4

  # Validate data integrity on load
  validate_on_load: true

  # Cache configuration (future)
  cache:
    enabled: false
    cache_dir: ".cache/qtrader"
    max_size_mb: 1000

# ============================================================
# Portfolio Service Configuration
# ============================================================
portfolio:
  # Lot tracking method for long positions
  # Options: fifo (first in first out), lifo (last in first out)
  lot_method_long: "fifo"

  # Lot tracking method for short positions
  # Options: fifo, lifo (currently only lifo supported)
  lot_method_short: "lifo"

  # Maximum ledger entries to track
  max_ledger_entries: 10_000

# ============================================================
# Execution Service Configuration
# ============================================================
execution:
  # Fill policy for order execution
  fill_policy: "conservative" # Options: conservative, aggressive, realistic

  # Slippage for different order types (basis points)
  slippage:
    market_order_bps: 5 # Market orders
    limit_order_bps: 0 # Limit orders (only fill if price touched)
    stop_order_bps: 5 # Stop orders
    moc_slip_bps: 5 # Market-on-close orders
    mode: "conservative" # conservative, aggressive, realistic

  # Commission calculation
  commission:
    model: "per_share"
    per_share: 0.0005
    minimum: 1.00
    maximum: null

  # Order queue management
  queue_bars: 3 # Maximum bars to keep unfilled orders in queue

  # Volume constraints
  max_volume_participation: 0.10 # Max 10% of bar volume per fill

# ============================================================
# Libraries
# ============================================================
# External library paths for custom implementations
# System will scan these directories and register all valid implementations
custom_libraries:
  risk_policies: "my_library/risk_policies"
  indicators: "my_library/indicators"
  strategies: "my_library/strategies"
  metrics: "my_library/metrics"

# ============================================================
# Strategy Service Configuration
# ============================================================
strategy:
  # Strategy loading and validation
  validate_on_load: true

  # Allow multiple strategies to run concurrently
  allow_concurrent: true

# ============================================================
# Output & Results Configuration
# ============================================================
output:
  # Base directory for backtest results
  default_results_dir: "output/backtests"

  # Event store configuration
  event_store:
    backend: "sqlite" # Options: sqlite, memory
    filename: "events.sqlite"

  # Organize results by date
  organize_by_date: true # Creates YYYY/MM/DD subdirectories

  # Use timestamps in directory names
  use_timestamps: true
  timestamp_format: "%Y%m%d_%H%M%S" # Format: 20241024_142153

# ============================================================
# Logging Configuration
# ============================================================
logging:
  # Minimum log level filter (console output)
  # INFO = User-friendly (summaries, signals, orders)
  # DEBUG = Verbose developer mode (all internal operations)
  # WARNING = Issues only
  level: "INFO"

  # Output format
  format: "console" # Options: console, json

  # Timestamp format for console output
  timestamp_format: "compact" # Options: iso, compact, time, short

  # Enable logging to file
  enable_file: true

  # Log file path (null = use default: logs/qtrader.log)
  file_path: null

  # Minimum log level for file output (typically WARNING or higher)
  file_level: "WARNING"

  # File rotation settings
  file_rotation: true
  max_file_size_mb: 10
  backup_count: 3

  # Console output width (0 = no limit)
  console_width: 0

# ============================================================
# Reporting Configuration
# ============================================================
# reporting:
#   # Metrics to calculate
#   metrics:
#     - "total_return"
#     - "sharpe_ratio"
#     - "max_drawdown"
#     - "win_rate"
#     - "profit_factor"
#     - "avg_trade_duration"
#     - "calmar_ratio"
#     - "sortino_ratio"
#     - "num_trades"
#     - "avg_win"
#     - "avg_loss"

#   # Report formatting
#   decimal_places: 4
#   include_trade_details: true

#   # Report generation
#   formats:
#     json: true
#     csv: true
#     html: false # Future
#     pdf: false # Future

# ============================================================
# User Preferences
# ============================================================
# is this in use?
preferences:
  # Display formats
  date_format: "%Y-%m-%d"
  currency_symbol: "$"
  thousands_separator: ","
  decimal_separator: "."
