# QTrader Data Sources Configuration
#
# Maps logical data sources (used in Instrument) to physical adapters.
# Supports environment variable substitution using ${VAR_NAME} syntax.
#
# Configuration precedence:
#   1. Explicit path provided to DataSourceResolver
#   2. ./config/data_sources.yaml (project-relative)
#   3. ~/.qtrader/data_sources.yaml (user home)

data_sources:
  # Algoseek Parquet (local files with OHLC data)
  algoseek:
    adapter: algoseekOHLC
    root_path: "data/us-equity-daily-ohlc-standard-adjusted-secid-all-parquet-sample"
    mode: standard_adjusted
    path_template: "{root_path}/SecId={secid}/*.parquet"
    symbol_map: "data/equity_security_master_sample.csv"

  # Schwab API (with cache-first strategy)
  schwab:
    adapter: schwabOHLC
    cache_root: "data/us-equity-daily-adjusted-schwab"
    mode: adjusted_only

    # OAuth credentials (required)
    client_id: "${SCHWAB_API_KEY}"
    client_secret: "${SCHWAB_API_SECRET}"

    # OAuth configuration (optional)
    redirect_uri: "${SCHWAB_REDIRECT_URI:-https://127.0.0.1:8182}"
    token_cache_path: "~/.qtrader/schwab_tokens.json"
    manual_mode: false

    # Rate limiting
    requests_per_second: 10

  # Database (PostgreSQL example - requires environment variables)
  # database:
  #   adapter: postgres_adapter
  #   connection_string: "${DB_CONNECTION_STRING}"
  #   schema: "market_data"
  #   table: "bars_daily"

  # IQFeed (live data API example)
  # iqfeed:
  #   adapter: iqfeed_api
  #   api_key: "${IQFEED_API_KEY}"
  #   base_url: "https://api.iqfeed.net/v1"

  # Binance (crypto exchange API)
  # binance:
  #   adapter: binance_api
  #   api_key: "${BINANCE_API_KEY}"
  #   api_secret: "${BINANCE_API_SECRET}"
  #   base_url: "https://api.binance.com"
